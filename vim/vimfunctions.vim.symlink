" Highlight Repeating Lines
function! HighlightRepeats() range
  let lineCounts = {}
  let lineNum = a:firstline
  while lineNum <= a:lastline
    let lineText = getline(lineNum)
    if lineText != ""
      let lineCounts[lineText] = (has_key(lineCounts, lineText) ? lineCounts[lineText] : 0) + 1
    endif
    let lineNum = lineNum + 1
  endwhile
  exe 'syn clear Repeat'
  for lineText in keys(lineCounts)
    if lineCounts[lineText] >= 2
      exe 'syn match Repeat "^' . escape(lineText, '".\^$*[]') . '$"'
    endif
  endfor
endfunction

command! -range=% HighlightRepeats <line1>,<line2>call HighlightRepeats()

" Write all search matches to a file, open that file
function! Matches()
  redir! >/tmp/matches.tmp
  g//
  redir END
  new /tmp/matches.tmp
endfunction

command! Matches <line1>,<line2>call Matches()

" Map case typos
command! E e
command! W w
command! Q q
command! Qa qa

" rm newlines from string
function! Chomp(string)
    return substitute(a:string, '\n\+$', '', '')
endfunction

" Chomp system() call
function! ChompedSystem( ... )
    return substitute(call('system', a:000), '\n\+$', '', '')
endfunction

" Print UTC date
function! UTCDate()
  let @z = ChompedSystem('date -u \+"%Y-%m-%d"')
  normal! "zp
endfunction

" Print ISO-8601 UTC datetime
function! UTCTime()
  let @z = ChompedSystem('date -u \+"%Y-%m-%dT%H:%MZ"')
  normal! "zp
endfunction

command! Date call UTCDate()
command! Time call UTCTime()
command! UTCDate call UTCDate()
command! UTCTime call UTCTime()

" Print local datetime
command! LocalTime put =strftime('%FT%T%z')

" Splits
function! SplitTwoByTwo()
  sp
  vsp
  winc k
  vsp
endfunction

"command! SplitTwoByTwo call SplitTwoByTwo()
command! SplitFour call SplitTwoByTwo()

" Print filename header in markdown
function! MarkdownHeader()
  let @a = '#'
  put! a
  put %
  normal! ggJ
  s/\.md$//
  "normal! jdd
endfunction

command! MarkdownHeader call MarkdownHeader()
