" Startup Vundle
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'Rename2'
Plugin 'benmills/vimux'
"Plugin 'tpope/vim-surround'
"Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-fugitive'
Plugin 'The-NERD-Commenter'
Plugin 'fatih/vim-go'
"Plugin 'scrooloose/nerdtree'
"Plugin 'tmhedberg/matchit'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'gcmt/taboo.vim'
Plugin 'bling/vim-airline'
"Plugin 'fholgado/minibufexpl.vim'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
"Plugin 'gabrielelana/vim-markdown'
"Plugin 'shime/vim-livedown'
"Plugin 'JamshedVesuna/vim-markdown-preview'
"Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-endwise'
Plugin 'tyru/open-browser.vim'
"Plugin 'wincent/command-t'
Plugin 'flazz/vim-colorschemes'
Plugin 'zenorocha/dracula-theme', {'rtp': 'vim/'}
Plugin 'danro/rename.vim'
"Plugin 'jiangmiao/auto-pairs'
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'vim-scripts/EasyGrep'
Plugin 'editorconfig/editorconfig-vim.git'
"Plugin 'xolox/vim-misc'
"Plugin 'xolox/vim-easytags'
Plugin 'majutsushi/tagbar'
Plugin 'mhinz/vim-startify'
Plugin 'mileszs/ack.vim'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'cespare/vim-toml'
"Plugin 'jeetsukumaran/vim-buffergator'
"Plugin 'ton/vim-bufsurf'
Plugin 'qpkorr/vim-bufkill'
Plugin 'vim-airline/vim-airline-themes'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" K, Add custom stuff below ---

" Line Numbers
set nonumber
"highlight LineNr ctermfg=darkgrey

" Recognize dash-separated values as words
set iskeyword+=-

" hide modified buffers instead of closing them
set hidden

" Split windows to the right and bottom for horz/vert
set splitright
set splitbelow

set background=dark
colors molokai
"colors blackboard
"colors hemisu
"colorscheme bubblegum
"colors noctu
"colorscheme nefertiti
"colorscheme pencil
"colorscheme badwolf
"" enable transparent term support
"let g:solarized_termtrans=1
"colorscheme solarized

"make sure to escape the spaces in the name properly
"set guifont=Source\ Code\ Pro\ for\ Powerline

" copy unnamed register to clipboard in macvim/gvim
"set clipboard=unnamed

" Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

" File Types & Indentation ---------------------------------------------------
set cindent
set smartindent
set autoindent

" Don't use spaces for tabs
"set noexpandtab

" Show tabs as 4 cols
"set tabstop=4
"set shiftwidth=4
"set softtabstop=4

" Set md file as markdown
"autocmd BufNewFile,BufRead *.md set filetype=markdown

" Treate .template as json
autocmd BufNewFile,BufRead *.template set filetype=json

" indentations
autocmd Filetype ruby setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

" File Types & Indentation END -----------------------------------------------

" Pretty invisibles
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<


" Use the same symbols as TextMate for tabstops and EOLs
"set listchars=tab:▸\ ,eol:¬

" Highlight one or more trailing spaces
" syntax match Error "\s\{2}$"

" map leader to spacebar
"let mapleader=" "
map <Space> <Leader>

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

" Classic backspace
"nnoremap <BS> X

" Paste mode toggle
nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O>:set invpaste paste?<CR>
set pastetoggle=<F2>

" number mode toggle
noremap <F3> :set invnumber<CR>
inoremap <F3> <C-O>:set invnumber<CR>

set cinkeys=0{,0},:,0#,!^F

" make C-C esc for InsertLeave, etc (insert)
ino <C-C> <Esc>

" visual indicator for insert mode
"augroup InsertColors
	"au InsertEnter * colors dracula | AirlineRefresh
	"au InsertLeave * colors molokai | AirlineRefresh
"augroup END

" beginning/end of line, shell style (insert)
inoremap <C-e> <Esc>A
inoremap <C-a> <Esc>I

" set normal C-o to save, for double tap
nmap S :w<cr>
"nmap <C-i> :q<cr>

" map buffer movement (normal)
" <Leader>s requires release of <Leader> :(
nmap <Leader>s :bn!<esc><cr>
nmap <Leader>a :bp!<esc><cr>
"nmap <Leader>s :BufSurfForward<cr>
"nmap <Leader>a :BufSurfBack<cr>
"nmap <Leader>d :bd<esc><cr>
nmap <Leader>d :BD<cr>
nmap <Leader>f :b
"nnoremap <Tab> :bnext<CR>
"nnoremap <S-Tab> :bprevious<CR>

" Tabs
nmap = :tabn<cr>
nmap - :tabp<cr>
nmap _ :tabm -1<cr>
nmap + :tabm +1<cr>

" Map ctrl+return to auto/smart indent
imap <C-Return> <CR><CR><C-o>k<Tab>

" lazy indent
"nmap <Tab> >>
"nmap <S-Tab> <<
"imap <S-Tab> <Esc><<i

" Map insert abnormals. Must be typed quickly!
" imap wq <Esc>:wq<cr>
" imap ww <Esc>:w<cr>i
" imap jj <Esc>

" In visual mode, make indent/unindent reselect after indent
"vmap <TAB> >gv
"vmap <S-TAB> <gv

" easier visual mode replace
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

" select pasted text
nmap gp `[v`]

" mouse mode
set mouse=a

" tmux mousefix
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif



" Smooth scroll
"map <ScrollWheelUp> <C-Y>
"map <ScrollWheelDown> <C-E>

" enable project rc
set exrc

" search highlighting
set hlsearch

" Save search matches in separate file
nnoremap <silent> <F4> :redir >>matches.tmp<CR>:g//<CR>:redir END<CR>:new matches.tmp<CR>

" Syntax Highlighting on
syntax on

" netrw/Explorer
let g:netrw_preview = 1 " preview file vertical split
let g:netrw_liststyle = 3 " tree list style
nmap <C-n> :Vexplore<CR> " explorer in vertical split

" Ack: map
nmap <Leader>vv :Ack<cr>

" Airline: show buffers when only one tab open
let g:airline#extensions#tabline#enabled = 0

" Airline: use powerline glyphs for symbols
let g:airline_powerline_fonts = 1

" Airline: show all the time, not just on splits
set laststatus=2
let g:airline#extensions#wordcount#enabled = 0 " disable word count
let g:airline_section_y = 0 " show nothing in encoding section
let g:airline#extensions#tabline#buffer_nr_show = 0 " show buffer numbers
let g:airline#extensions#tabline#fnametruncate = 0 " truncate non-active filenames
let g:airline#extensions#tabline#fnamemod = ':p:t' " show only filename, see filename-modifiers for more

" Enable index select
let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" Airline Theme
"AirlineTheme wombat
"AirlineTheme bubblegum
"AirlineTheme tomorrow
"AirlineTheme jellybeans
"AirlineTheme luna
"AirlineTheme hybrid


" vim-markdown: no folding
let g:vim_markdown_folding_disabled=1
" fenced highlight aliases alias=orig
let g:markdown_fenced_languages = ['bash=sh', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'rb=ruby', 'sass', 'xml']

" gabrielelana/vim-markdown
let g:markdown_enable_spell_checking = 0 " disable spellcheck
let g:markdown_include_jekyll_support = 0
let g:markdown_enable_mappings = 0
let g:markdown_enable_input_abbreviations = 0

" shime/vim-livedown
let g:livedown_autorun = 0
let g:livedown_open = 0

" CtrlP
let g:ctrlp_show_hidden = 1
let g:ctrlp_reuse_window  = 'startify' " fix new window split issue
let g:ctrlp_open_new_file = 'r' " open new file in current window
let g:ctrlp_working_path_mode = 0 " disable fancy working path
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn))|(tmp|node_modules|dist|vendor/bundle)$',
  \ 'file': '\v\.(exe|so|dll|jpg|jpeg|png|swp|swo)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_bufname_mod = ':.' " show full path relative to cwd
let g:ctrlp_bufpath_mod = '' " nothing in the path section

" list buffers nicely
nmap <C-\> :CtrlPBuffer<cr>

" YCM ON EVERYTHING
"let g:ycm_filetype_blacklist = {}

" vimux bindings
nmap <Leader>rp :VimuxPromptCommand<CR>
nmap <Leader>rl :VimuxRunLastCommand<CR>
nmap <Leader>ri :VimuxInspectRunner<CR>
nmap <Leader>rx :VimuxCloseRunner<CR>
nmap <Leader>rz :VimuxZoomRunner<CR>
nmap <Leader>rs :VimuxInterruptRunner<CR>

" tags
"set tags=./tags

" tagbar
"let g:tagbar_width=26 " Default is 40, seems too wide
noremap <Leader>y :TagbarToggle<cr>

" easytags
"let g:easytags_dynamic_files = 2 " write project-specific tags
"let g:easytags_async = 1 " generate tags asynchronously

" nerdtree
"map <C-n> :NERDTreeToggle<CR>

" close if only window is nerdtree
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" quit vim if no buffers
"autocmd BufDelete * if len(filter(range(1, bufnr('$')), '! empty(bufname(v:val)) && buflisted(v:val)')) == 1 | quit | endif

" startify
let g:startify_custom_header = []
let g:startify_relative_path = 1
let g:startify_list_order = ['dir', 'files', 'bookmarks', 'sessions']
let g:startify_change_to_dir = 1

" vim-markdown-preview
"let vim_markdown_preview_github=1 " use grip disable to use markdown cli
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_browser='Google Chrome'
let vim_markdown_preview_temp_file=1 " rm file after render

" buffergator
"nnoremap <silent> <Leader>b :BuffergatorToggle<CR> " toggle instead of open
let g:buffergator_viewport_split_policy='T' " open viewport horz top
let g:buffergator_autodismiss_on_select=1 " dismiss viewport on select
let g:buffergator_display_regime='filepath' " view full filepath
let g:buffergator_sort_regime='filepath' " sort on full filepath
"let g:buffergator_autoupdate=1 " update viewport when bufferlist changes (buggy)

" MiniBufExplorer --------------------------------------------

" Allow single clicks
let g:miniBufExplUseSingleClick = 1

" Hide buffer numbers
let g:miniBufExplShowBufNumbers = 0

" Place MBE window above/left. Good if using splitbelow/splitright
let g:miniBufExplBRSplit = 0

" Show MBE when the following num of buffers are present
" 0 - skip eligible buffer checking
let g:miniBufExplBuffersNeeded = 2

" Better colors
hi MBENormal               ctermfg=069 guifg=#808080 guibg=fg
hi MBEChanged              ctermfg=196 guifg=#CD5907 guibg=fg
hi MBEVisibleNormal        ctermfg=069 guifg=#5DC2D6 guibg=fg
hi MBEVisibleChanged       ctermfg=210 guifg=#F1266F guibg=fg
hi MBEVisibleActiveNormal  ctermfg=046 guifg=#A6DB29 guibg=fg
hi MBEVisibleActiveChanged ctermfg=214 guifg=#F1266F guibg=fg

" MiniBufExplorer END ---------------------------------------

source ~/.vimfunctions
