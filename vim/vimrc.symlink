" Startup Vundle
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'Rename2'
Plugin 'benmills/vimux'
Plugin 'tpope/vim-fugitive'
Plugin 'The-NERD-Commenter'
Plugin 'fatih/vim-go'
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'bling/vim-airline'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-endwise'
Plugin 'tyru/open-browser.vim'
Plugin 'wincent/command-t'
Plugin 'flazz/vim-colorschemes'
Plugin 'danro/rename.vim'
Plugin 'jiangmiao/auto-pairs'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" K, Add custom stuff below --- 

set nonumber
"highlight LineNr ctermfg=darkgrey

set cindent
set smartindent
set autoindent

" Don't use spaces for tabs
set noexpandtab

" Show tabs as 4 cols
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Syntax-specific tabbing
autocmd Filetype ruby setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

" Pretty invisibles
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

set cinkeys=0{,0},:,0#,!^F

" set normal C-o to save, for double tap
nmap <C-o> :w<esc><esc>

" map buffer movement (normal) 
nmap <Leader>s :bn!<cr>
nmap <Leader>a :bp!<cr>
nmap <Leader>d :bd<cr> 
nmap <Leader>f :b<cr>


" Map ctrl+return to auto/smart indent
imap <C-Return> <CR><CR><C-o>k<Tab>

" lazy indent
nmap <Tab> >>

" lazy unindent
nmap <S-Tab> <<
imap <S-Tab> <Esc><<i

" Map insert abnormals. Must be typed quickly!
" imap wq <Esc>:wq<cr>
" imap ww <Esc>:w<cr>i
" imap jj <Esc>

" In visual mode, make indent/unindent reselect after indent
vmap <TAB> >gv
vmap <S-TAB> <gv

" mouse mode
set mouse=a

" enable project rc
set exrc

" Syntax Highlighting on
syntax on

" Set md file as markdown
autocmd BufNewFile,BufRead *.md set filetype=markdown

" Airline: show buffers when only one tab open
let g:airline#extensions#tabline#enabled = 1

" Airline: use powerline glyphs for symbols
let g:airline_powerline_fonts = 1

" vim-markdown: no folding
let g:vim_markdown_folding_disabled=1

let g:markdown_fenced_languages = ['css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'rb=ruby', 'sass', 'xml']

set background=dark
colors molokai
"colors hemisu
"colorscheme bubblegum
"colors noctu
"colorscheme nefertiti
"colorscheme pencil
"colorscheme badwolf
"" enable transparent term support
"let g:solarized_termtrans=1
"colorscheme solarized

"make sure to escape the spaces in the name properly
"set guifont=Source\ Code\ Pro\ for\ Powerline

" vimux bindings
nmap rp :VimuxPromptCommand<CR>
nmap rl :VimuxRunLastCommand<CR>
nmap ri :VimuxInspectRunner<CR>
nmap rx :VimuxCloseRunner<CR>
nmap rz :VimuxZoomRunner<CR>
nmap rs :VimuxInterruptRunner<CR>

" nerdtree
map <C-n> :NERDTreeToggle<CR>

" close if only window is nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" quit vim if no buffers
autocmd BufDelete * if len(filter(range(1, bufnr('$')), '! empty(bufname(v:val)) && buflisted(v:val)')) == 1 | quit | endif

" Classic backspace
nnoremap <BS> X
